From d52ab6a37059b9d47b010c7d83d50f59c72e6373 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Sun, 13 Aug 2017 12:04:59 -0400
Subject: [PATCH] WIP fix ad-hoc development package feeds

---
 meta/lib/oe/package_manager.py | 65 +++++++++++++++++++---------------
 1 file changed, 36 insertions(+), 29 deletions(-)

diff --git a/meta/lib/oe/package_manager.py b/meta/lib/oe/package_manager.py
index 2835c1ddf8..a6eb1ac145 100644
--- a/meta/lib/oe/package_manager.py
+++ b/meta/lib/oe/package_manager.py
@@ -1209,6 +1209,39 @@ class OpkgPM(OpkgDpkgPM):
 
         os.rename(status_file + ".tmp", status_file)
 
+    def _create_local_configs(self):
+        """
+        Allow to use package deploy directory contents as quick devel-testing
+        feed. This creates individual feed configs for each arch subdir of those
+        specified as compatible for the current machine.
+        NOTE: Development-helper feature, NOT a full-fledged feed.
+        """
+        baseuri = self.d.getVar('FEED_DEPLOYDIR_BASE_URI')
+        if baseuri:
+            for arch in self.pkg_archs.split():
+                cfg_file_name = os.path.join(self.target_rootfs,
+                                             self.d.getVar("sysconfdir").lstrip("/"),
+                                             "opkg",
+                                             "local-%s-feed.conf" % arch)
+
+                os.makedirs(os.path.dirname(cfg_file_name), exist_ok=True)
+                with open(cfg_file_name, "w+") as cfg_file:
+                    feed_name = "local-" + arch
+                    feed_uri = baseuri + "/" + arch
+                    bb.note("Add %s feed with URL %s" % (feed_name, feed_uri))
+                    cfg_file.write("src/gz %s %s\n"%(feed_name, feed_uri))
+
+                    if self.d.getVar('OPKGLIBDIR') != '/var/lib':
+                        # There is no command line option for this anymore, we need to add
+                        # info_dir and status_file to config file, if OPKGLIBDIR doesn't have
+                        # the default value of "/var/lib" as defined in opkg:
+                        # libopkg/opkg_conf.h:#define OPKG_CONF_DEFAULT_LISTS_DIR     VARDIR "/lib/opkg/lists"
+                        # libopkg/opkg_conf.h:#define OPKG_CONF_DEFAULT_INFO_DIR      VARDIR "/lib/opkg/info"
+                        # libopkg/opkg_conf.h:#define OPKG_CONF_DEFAULT_STATUS_FILE   VARDIR "/lib/opkg/status"
+                        cfg_file.write("option info_dir     %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'info'))
+                        cfg_file.write("option lists_dir    %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'lists'))
+                        cfg_file.write("option status_file  %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'status'))
+
     def _create_custom_config(self):
         bb.note("Building from feeds activated!")
 
@@ -1229,35 +1262,7 @@ class OpkgPM(OpkgDpkgPM):
 
                     config_file.write("src/gz %s %s\n" % (feed_name, feed_uri))
 
-            """
-            Allow to use package deploy directory contents as quick devel-testing
-            feed. This creates individual feed configs for each arch subdir of those
-            specified as compatible for the current machine.
-            NOTE: Development-helper feature, NOT a full-fledged feed.
-            """
-            if (self.d.getVar('FEED_DEPLOYDIR_BASE_URI') or "") != "":
-                for arch in self.pkg_archs.split():
-                    cfg_file_name = os.path.join(self.target_rootfs,
-                                                 self.d.getVar("sysconfdir"),
-                                                 "opkg",
-                                                 "local-%s-feed.conf" % arch)
-
-                    with open(cfg_file_name, "w+") as cfg_file:
-                        cfg_file.write("src/gz local-%s %s/%s" %
-                                       (arch,
-                                        self.d.getVar('FEED_DEPLOYDIR_BASE_URI'),
-                                        arch))
-
-                        if self.d.getVar('OPKGLIBDIR') != '/var/lib':
-                            # There is no command line option for this anymore, we need to add
-                            # info_dir and status_file to config file, if OPKGLIBDIR doesn't have
-                            # the default value of "/var/lib" as defined in opkg:
-                            # libopkg/opkg_conf.h:#define OPKG_CONF_DEFAULT_LISTS_DIR     VARDIR "/lib/opkg/lists"
-                            # libopkg/opkg_conf.h:#define OPKG_CONF_DEFAULT_INFO_DIR      VARDIR "/lib/opkg/info"
-                            # libopkg/opkg_conf.h:#define OPKG_CONF_DEFAULT_STATUS_FILE   VARDIR "/lib/opkg/status"
-                            cfg_file.write("option info_dir     %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'info'))
-                            cfg_file.write("option lists_dir    %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'lists'))
-                            cfg_file.write("option status_file  %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'status'))
+        self._create_local_configs()
 
 
     def _create_config(self):
@@ -1286,6 +1291,8 @@ class OpkgPM(OpkgDpkgPM):
                 config_file.write("option lists_dir    %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'lists'))
                 config_file.write("option status_file  %s\n" % os.path.join(self.d.getVar('OPKGLIBDIR'), 'opkg', 'status'))
 
+        self._create_local_configs()
+
     def insert_feeds_uris(self, feed_uris, feed_base_paths, feed_archs):
         if feed_uris == "":
             return
-- 
2.21.0

