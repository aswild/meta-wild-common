From 7554300d708ac9744bf9960af5c0ab8f01bf9cd7 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Tue, 21 Jan 2020 21:31:37 -0500
Subject: [PATCH] package: run file with the -S option to skip seccomp
 sandboxing

The new seccomp sandbox in file disables a bunch of syscalls, then
pesudo's hooks try to run some of those syscalls (like getpid) and
do_package fails.

This is supposedly fixed in [1] which builds file-native with
--disable-libseccomp, but the hosttools file gets used instead so that
has no effect.

Furthermore, using EXTRANATIVEPATH or PATH_prepend for the _task-package
override doesn't work because changes to the Bitbake variable PATH don't
propagate to the environment when running Python tasks, only shell
tasks, and that's a Bitbake rabbit hole I'm not going to find an elegant
fix for.

So work around by calling 'file' with -bS instead of -b to disable its
sandbox mode. This may break on non-Arch build systems if they don't
have the -S option available.

[1] https://patchwork.openembedded.org/patch/165913/
---
 meta/lib/oe/package.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/meta/lib/oe/package.py b/meta/lib/oe/package.py
index dd700cbb0c..c601b80e21 100644
--- a/meta/lib/oe/package.py
+++ b/meta/lib/oe/package.py
@@ -71,7 +71,7 @@ def is_kernel_module_signed(path):
 # 16 - kernel module
 def is_elf(path):
     exec_type = 0
-    result = subprocess.check_output(["file", "-b", path], stderr=subprocess.STDOUT).decode("utf-8")
+    result = subprocess.check_output(["file", "-bS", path], stderr=subprocess.STDOUT).decode("utf-8")
 
     if "ELF" in result:
         exec_type |= 1
-- 
2.28.0

