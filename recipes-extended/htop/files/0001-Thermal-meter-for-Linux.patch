From ed9e1bc749e41eadb87160e4a1b248c5527d2be5 Mon Sep 17 00:00:00 2001
From: Allen Wild <allenwild93@gmail.com>
Date: Tue, 29 Aug 2017 00:41:50 -0400
Subject: [PATCH] Thermal meter for Linux

---
 Makefile.am           |  24 ++++++------
 ThermalMeter.c        |  35 +++++++++++++++++
 ThermalMeter.h        |  20 ++++++++++
 linux/Platform.c      |   2 +
 linux/Thermal.c       | 105 ++++++++++++++++++++++++++++++++++++++++++++++++++
 linux/Thermal.h       |  33 ++++++++++++++++
 unsupported/Thermal.c |  18 +++++++++
 unsupported/Thermal.h |  16 ++++++++
 8 files changed, 241 insertions(+), 12 deletions(-)
 create mode 100644 ThermalMeter.c
 create mode 100644 ThermalMeter.h
 create mode 100644 linux/Thermal.c
 create mode 100644 linux/Thermal.h
 create mode 100644 unsupported/Thermal.c
 create mode 100644 unsupported/Thermal.h

diff --git a/Makefile.am b/Makefile.am
index 19c9eb4..b1ceb95 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -21,7 +21,7 @@ ClockMeter.c ColorsPanel.c ColumnsPanel.c CPUMeter.c CRT.c MainPanel.c \
 DisplayOptionsPanel.c FunctionBar.c Hashtable.c Header.c htop.c ListItem.c \
 LoadAverageMeter.c MemoryMeter.c Meter.c MetersPanel.c Object.c Panel.c \
 BatteryMeter.c Process.c ProcessList.c RichString.c ScreenManager.c Settings.c \
-SignalsPanel.c StringUtils.c SwapMeter.c TasksMeter.c UptimeMeter.c \
+SignalsPanel.c StringUtils.c SwapMeter.c TasksMeter.c ThermalMeter.c UptimeMeter.c \
 TraceScreen.c UsersTable.c Vector.c AvailableColumnsPanel.c AffinityPanel.c \
 HostnameMeter.c OpenFilesScreen.c Affinity.c IncSet.c Action.c EnvScreen.c \
 InfoScreen.c XAlloc.c
@@ -32,52 +32,52 @@ CPUMeter.h CRT.h MainPanel.h DisplayOptionsPanel.h FunctionBar.h \
 Hashtable.h Header.h htop.h ListItem.h LoadAverageMeter.h MemoryMeter.h \
 BatteryMeter.h Meter.h MetersPanel.h Object.h Panel.h ProcessList.h RichString.h \
 ScreenManager.h Settings.h SignalsPanel.h StringUtils.h SwapMeter.h \
-TasksMeter.h UptimeMeter.h TraceScreen.h UsersTable.h Vector.h Process.h \
+TasksMeter.h ThermalMeter.h UptimeMeter.h TraceScreen.h UsersTable.h Vector.h Process.h \
 AffinityPanel.h HostnameMeter.h OpenFilesScreen.h Affinity.h IncSet.h Action.h \
 EnvScreen.h InfoScreen.h XAlloc.h
 
 if HTOP_LINUX
 htop_CFLAGS += -rdynamic 
 myhtopplatsources = linux/Platform.c linux/IOPriorityPanel.c linux/IOPriority.c \
-linux/LinuxProcess.c linux/LinuxProcessList.c linux/LinuxCRT.c linux/Battery.c
+linux/LinuxProcess.c linux/LinuxProcessList.c linux/LinuxCRT.c linux/Battery.c linux/Thermal.c
 
 myhtopplatheaders = linux/Platform.h linux/IOPriorityPanel.h linux/IOPriority.h \
-linux/LinuxProcess.h linux/LinuxProcessList.h linux/LinuxCRT.h linux/Battery.h
+linux/LinuxProcess.h linux/LinuxProcessList.h linux/LinuxCRT.h linux/Battery.h linux/Thermal.h
 endif
 
 if HTOP_FREEBSD
 myhtopplatsources = freebsd/Platform.c freebsd/FreeBSDProcessList.c \
-freebsd/FreeBSDProcess.c freebsd/FreeBSDCRT.c freebsd/Battery.c
+freebsd/FreeBSDProcess.c freebsd/FreeBSDCRT.c freebsd/Battery.c unsupported/Thermal.c
 
 myhtopplatheaders = freebsd/Platform.h freebsd/FreeBSDProcessList.h \
-freebsd/FreeBSDProcess.h freebsd/FreeBSDCRT.h freebsd/Battery.h
+freebsd/FreeBSDProcess.h freebsd/FreeBSDCRT.h freebsd/Battery.h unsupported/Thermal.h
 endif
 
 if HTOP_OPENBSD
 myhtopplatsources = openbsd/Platform.c openbsd/OpenBSDProcessList.c \
-openbsd/OpenBSDProcess.c openbsd/OpenBSDCRT.c openbsd/Battery.c
+openbsd/OpenBSDProcess.c openbsd/OpenBSDCRT.c openbsd/Battery.c unsupported/Thermal.c
 
 myhtopplatheaders = openbsd/Platform.h openbsd/OpenBSDProcessList.h \
-openbsd/OpenBSDProcess.h openbsd/OpenBSDCRT.h openbsd/Battery.h
+openbsd/OpenBSDProcess.h openbsd/OpenBSDCRT.h openbsd/Battery.h unsupported/Thermal.h
 endif
 
 if HTOP_DARWIN
 htop_LDFLAGS += -framework IOKit -framework CoreFoundation
 myhtopplatsources = darwin/Platform.c darwin/DarwinProcess.c \
-darwin/DarwinProcessList.c darwin/DarwinCRT.c darwin/Battery.c
+darwin/DarwinProcessList.c darwin/DarwinCRT.c darwin/Battery.c unsupported/Thermal.c
 
 myhtopplatheaders = darwin/Platform.h darwin/DarwinProcess.h \
-darwin/DarwinProcessList.h darwin/DarwinCRT.h darwin/Battery.h
+darwin/DarwinProcessList.h darwin/DarwinCRT.h darwin/Battery.h unsupported/Thermal.h
 endif
 
 if HTOP_UNSUPPORTED
 myhtopplatsources = unsupported/Platform.c \
 unsupported/UnsupportedProcess.c unsupported/UnsupportedProcessList.c \
-unsupported/UnsupportedCRT.c unsupported/Battery.c
+unsupported/UnsupportedCRT.c unsupported/Battery.c unsupported/Thermal.c
 
 myhtopplatheaders = unsupported/Platform.h \
 unsupported/UnsupportedProcess.h unsupported/UnsupportedProcessList.h \
-unsupported/UnsupportedCRT.h unsupported/Battery.h
+unsupported/UnsupportedCRT.h unsupported/Battery.h unsupported/Thermal.h
 endif
 
 SUFFIXES = .h
diff --git a/ThermalMeter.c b/ThermalMeter.c
new file mode 100644
index 0000000..ec04129
--- /dev/null
+++ b/ThermalMeter.c
@@ -0,0 +1,35 @@
+/*
+htop - ThermalMeter.c
+(C) 2017 Allen Wild
+Released under the GNU GPL, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#include "CRT.h"
+#include "ThermalMeter.h"
+
+/*{
+#include "Meter.h"
+extern void ThermalMeter_init(Meter *this);
+extern void ThermalMeter_updateValues(Meter *this, char *buf, int size);
+}*/
+
+int ThermalMeter_attributes[] = {
+    METER_VALUE // the font color type
+};
+
+MeterClass ThermalMeter_class = {
+    .super = {
+        .extends = Class(Meter),
+        .delete = Meter_delete
+    },
+    .updateValues = ThermalMeter_updateValues,
+    .init = ThermalMeter_init,
+    .defaultMode = TEXT_METERMODE,
+    .maxItems = 1,
+    .total = 100.0,
+    .attributes = ThermalMeter_attributes,
+    .name = "Thermal",
+    .uiName = "Temperature",
+    .caption = "Temp: ",
+};
diff --git a/ThermalMeter.h b/ThermalMeter.h
new file mode 100644
index 0000000..9bd95ea
--- /dev/null
+++ b/ThermalMeter.h
@@ -0,0 +1,20 @@
+/* Do not edit this file. It was automatically generated. */
+
+#ifndef HEADER_ThermalMeter
+#define HEADER_ThermalMeter
+/*
+htop - ThermalMeter.h
+(C) 2017 Allen Wild
+Released under the GNU GPL, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#include "Meter.h"
+extern void ThermalMeter_init(Meter *this);
+extern void ThermalMeter_updateValues(Meter *this, char *buf, int size);
+
+extern int ThermalMeter_attributes[];
+
+extern MeterClass ThermalMeter_class;
+
+#endif
diff --git a/linux/Platform.c b/linux/Platform.c
index 04360ca..cd09c8a 100644
--- a/linux/Platform.c
+++ b/linux/Platform.c
@@ -20,6 +20,7 @@ in the source distribution for its full text.
 #include "LoadAverageMeter.h"
 #include "UptimeMeter.h"
 #include "ClockMeter.h"
+#include "ThermalMeter.h"
 #include "HostnameMeter.h"
 #include "LinuxProcess.h"
 
@@ -118,6 +119,7 @@ MeterClass* Platform_meterTypes[] = {
    &TasksMeter_class,
    &UptimeMeter_class,
    &BatteryMeter_class,
+   &ThermalMeter_class,
    &HostnameMeter_class,
    &AllCPUsMeter_class,
    &AllCPUs2Meter_class,
diff --git a/linux/Thermal.c b/linux/Thermal.c
new file mode 100644
index 0000000..92c6aea
--- /dev/null
+++ b/linux/Thermal.c
@@ -0,0 +1,105 @@
+/*
+htop - Thermal.c
+(C) 2017 Allen Wild
+Released under the GNU GPL, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <dirent.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#include "Meter.h"
+
+#define MAX_ZONES 6
+#define MAX_PATHLEN 64
+#define MAX_TYPELEN 64
+
+#define SYS_THERMAL "/sys/class/thermal"
+#define SYS_THERMAL_ZONE SYS_THERMAL "/thermal_zone%d"
+#define SYS_THERMAL_ZONE_TYPE SYS_THERMAL_ZONE "/type"
+#define SYS_THERMAL_ZONE_TEMP SYS_THERMAL_ZONE "/temp"
+
+#define THERMAL_ZONE "thermal_zone"
+#define THERMAL_ZONE_LEN strlen(THERMAL_ZONE)
+
+typedef struct {
+    int valid;
+    char type[MAX_TYPELEN];
+} thermal_zone_t;
+
+static thermal_zone_t zones[MAX_ZONES];
+
+void ThermalMeter_init(Meter *this) {
+    FILE *fp;
+    DIR *dir;
+    struct dirent *de;
+    char path_buf[MAX_PATHLEN] = {0};
+
+    (void)this; // suppress unused parameter warning
+
+    memset(zones, 0, sizeof(zones));
+
+    if ((dir = opendir(SYS_THERMAL)) == NULL) {
+        return;
+    }
+
+    while ((de = readdir(dir)) != NULL) {
+        if (!strncmp(de->d_name, THERMAL_ZONE, THERMAL_ZONE_LEN)) {
+            int i = (int)strtol(de->d_name + THERMAL_ZONE_LEN, NULL, 10);
+            if (i >= MAX_ZONES) {
+                continue;
+            }
+
+            snprintf(path_buf, sizeof(path_buf), SYS_THERMAL_ZONE_TEMP, i);
+            if (access(path_buf, R_OK)) {
+                // unable to read temp file, skip
+                continue;
+            }
+
+            zones[i].valid = 1;
+            snprintf(path_buf, sizeof(path_buf), SYS_THERMAL_ZONE_TYPE, i);
+            if ((fp = fopen(path_buf, "r")) != NULL) {
+                size_t r = fread(&(zones[i].type), 1, MAX_TYPELEN, fp);
+                fclose(fp);
+                if (zones[i].type[r-1] == '\n') {
+                    zones[i].type[r-1] = '\0';
+                }
+            }
+        }
+    }
+    closedir(dir);
+}
+
+void ThermalMeter_updateValues(Meter *this, char *buf, int size) {
+    FILE *fp;
+    char path_buf[MAX_PATHLEN] = {0};
+    char temp_buf[8] = {0};
+    int i, len = 0;
+
+    (void)this; // suppress unused parameter warning
+
+    for (i = 0; i < MAX_ZONES; i++) {
+        if (!zones[i].valid) {
+            continue;
+        }
+        snprintf(path_buf, sizeof(path_buf), SYS_THERMAL_ZONE_TEMP, i);
+        if ((fp = fopen(path_buf, "r")) != NULL) {
+            long ltemp;
+            float ftemp;
+            fread(temp_buf, 1, sizeof(temp_buf), fp);
+            ltemp = strtol(temp_buf, NULL, 10);
+            ftemp = ltemp / 1000.0;
+            len += snprintf(buf + len, size - len, "%s: %.1f, ", zones[i].type, ftemp);
+            fclose(fp);
+        }
+    }
+    // strip trailing ", "
+    buf[len - 2] = '\0';
+}
diff --git a/linux/Thermal.h b/linux/Thermal.h
new file mode 100644
index 0000000..8baf93c
--- /dev/null
+++ b/linux/Thermal.h
@@ -0,0 +1,33 @@
+/* Do not edit this file. It was automatically generated. */
+
+#ifndef HEADER_Thermal
+#define HEADER_Thermal
+/*
+htop - Thermal.h
+(C) 2017 Allen Wild
+Released under the GNU GPL, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+
+#define MAX_ZONES 6
+#define MAX_PATHLEN 64
+#define MAX_TYPELEN 64
+
+#define SYS_THERMAL "/sys/class/thermal"
+#define SYS_THERMAL_ZONE SYS_THERMAL "/thermal_zone%d"
+#define SYS_THERMAL_ZONE_TYPE SYS_THERMAL_ZONE "/type"
+#define SYS_THERMAL_ZONE_TEMP SYS_THERMAL_ZONE "/temp"
+
+#define THERMAL_ZONE "thermal_zone"
+#define THERMAL_ZONE_LEN strlen(THERMAL_ZONE)
+
+
+void ThermalMeter_init(Meter *this);
+
+void ThermalMeter_updateValues(Meter *this, char *buf, int size);
+
+#endif
diff --git a/unsupported/Thermal.c b/unsupported/Thermal.c
new file mode 100644
index 0000000..bb2da25
--- /dev/null
+++ b/unsupported/Thermal.c
@@ -0,0 +1,18 @@
+/*
+htop - Thermal.c
+(C) 2017 Allen Wild
+Released under the GNU GPL, see the COPYING file
+in the source distribution for its full text.
+*/
+
+#include "Meter.h"
+
+void ThermalMeter_init(Meter *this) {
+    (void)this; // no-op, suppress unused parameter warning
+}
+
+void ThermalMeter_updateValues(Meter *this, char *buf, int size) {
+    (void)this;
+    (void)buf;
+    (void)size;
+}
diff --git a/unsupported/Thermal.h b/unsupported/Thermal.h
new file mode 100644
index 0000000..c248621
--- /dev/null
+++ b/unsupported/Thermal.h
@@ -0,0 +1,16 @@
+/* Do not edit this file. It was automatically generated. */
+
+#ifndef HEADER_Thermal
+#define HEADER_Thermal
+/*
+htop - Thermal.h
+(C) 2017 Allen Wild
+Released under the GNU GPL, see the COPYING file
+in the source distribution for its full text.
+*/
+
+void ThermalMeter_init(Meter *this);
+
+void ThermalMeter_updateValues(Meter *this, char *buf, int size);
+
+#endif
-- 
2.15.1

